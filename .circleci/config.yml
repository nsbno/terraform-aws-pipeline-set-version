version: 1.0
jobs:
  build-lambda-zips:
    docker:
      - image: circleci/python:3.7.0
    working_directory: /tmp/workspace
    steps:
      - checkout:
          path: ~/repo
      - run:
          name: Build Lambda function
          command: |
            s3_prefix="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/lambdas"
            zip_path="$(pwd)/artifacts/$s3_prefix"
            lambda_dir=~/repo/src

            printf "Initial contents of current directory '%s':\n" "$(pwd)"
            ls -al

            mkdir -p "$zip_path"

            test -d "$lambda_dir" || exit 1
            (
              cd "$lambda_dir"
              if [ -e "./ci_prepare.sh" ]; then
                printf "Running ./ci_prepare.sh before zipping file\n"
                bash "./ci_prepare.sh" || { printf "CI preparation script failed\n" && exit 1; }
                printf "Successfully ran CI preparation script\n"
              fi
              lambda_name="$(basename "$lambda_dir")"
              lambda_zip_path="$zip_path/$lambda_name"
              zip_file="$lambda_zip_path/$lambda_name.zip"
              mkdir -p "$lambda_zip_path"
              if [ -e "./package.zip" ]; then
                printf "Found an existing zip archive '%s'. Copying this file to '%s' instead of creating a new archive\n" "./package.zip" "$zip_file"
                cp ./package.zip "$zip_file"
              else
                printf "Creating zip archive of Lambda '%s':\n" "$zip_file"
                zip -r "$zip_file" ./*.py
              fi
            )

            printf "Final contents of current directory '%s':\n" "$(pwd)"
            ls -al
      - persist_to_workspace:
          root: ./
          paths:
            - "*"

  build-repo-zip:
    docker:
      - image: circleci/buildpack-deps:latest
    working_directory: /tmp/workspace
    steps:
      - checkout:
          path: ~/repo
      - run:
          name: Zip source code
          command: |
            s3_prefix="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/branches/$CIRCLE_BRANCH"
            sha1="$(echo $CIRCLE_SHA1 | cut -c -7)"
            artifacts_dir="artifacts"
            trigger_file="trigger-event.json"
            zip_path="$(pwd)/$artifacts_dir/$s3_prefix"
            zip_file="$zip_path/$sha1.zip"

            printf "Initial contents of current directory '%s':\n" "$(pwd)"
            ls -al

            mkdir -p "$zip_path"
            printf "Creating zip archive of source code '%s':\n" "$zip_file"
            (cd ~/repo; zip -r "$zip_file" ./*)
            cp "$zip_file" "$zip_path/latest.zip"

            cat <<EOF > "$trigger_file"
            {
              "SHA": "$sha1",
              "date": "$(date)"
            }
            EOF
            printf "Final contents of current directory '%s':\n" "$(pwd)"
            ls -al
      - persist_to_workspace:
          root: ./
          paths:
            - "*"
  upload-repo-zip:
    docker:
      - image: vydev/circleci-ecr:latest
    working_directory: /tmp/workspace
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Upload source to S3
          command: |
            s3_bucket="689783162268-git-webhook-cache-erlend"
            s3_prefix="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/branches/$CIRCLE_BRANCH"

            printf "Contents of current directory '%s':\n" "$(pwd)"
            ls -al

            num_dirs="$(find . -maxdepth 1 -mindepth 1 -type d | wc -l)"
            num_json="$(find . -maxdepth 1 -mindepth 1 -type f -name "*.json" | wc -l)"
            num_zips="$(find . -type f -name "*.zip" | wc -l)"
            if [ ! "$num_dirs" -eq 1 ] || [ ! "$num_zips" -gt 0 ]; then
              printf "Expected to find 1 directory and more than 1 zip file, but found %s directories and %s zip files\n" "$num_dirs" "$num_zips"
              exit 1
            fi

            printf "Uploading files to s3://%s/%s\n" "$s3_bucket" "$s3_prefix"
            echo aws s3 sync ./*/. "s3://$s3_bucket"
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-lambda-zip:
          filters:
            branches:
              only:
                - master
      - build-repo-zip:
          filters:
            branches:
              only:
                - master
          requires:
            - build-lambda-zip
      - upload-repo-zip:
          filters:
            branches:
              only:
                - master
          requires:
            - build-repo-zip
